if (libs.isAddUserLib) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}

apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'

android {
    namespace 'com.suromo.module_user'
    compileSdk cfgs.compileSdkVersion

    defaultConfig {
        if (!libs.isAddUserLib) {
            applicationId "com.suromo.module_user"
        }
        minSdk cfgs.minSdkVersion
        targetSdk cfgs.targetSdkVersion
        versionCode cfgs.versionCode
        versionName cfgs.versionName

        testInstrumentationRunner cfgs.testInstrumentationRunner

        multiDexEnabled true
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            if (libs.isAddUserLib) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }

    signingConfigs {
        releaseConfig {
            storeFile file(sign.file)
            storePassword sign.storePassword
            keyAlias sign.keyAlias
            keyPassword sign.keyPassword
        }
    }

    buildTypes {
        debug {
            minifyEnabled true // 混淆
            debuggable true
        }

        release {
            signingConfig signingConfigs.releaseConfig //签名
            minifyEnabled true // 混淆
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "$des.compose_compiler_version"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    //作为library运行时才需要依赖的
    if (libs.isAddUserLib) {
        compileOnly fileTree(include: ['*.jar'], dir: 'libs')
    } else {
        //独立运行时需要依赖的
        implementation fileTree(include: ['*.jar'], dir: 'libs')
    }

    implementation project(path: ':lib_common')

    implementation "androidx.core:core-ktx:$des.core_ktx_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$des.lifecycle_runtime_ktx_version"
    implementation "androidx.activity:activity-compose:$des.activity_compose_version"
    implementation "androidx.compose.ui:ui:$des.compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$des.compose_version"
    implementation "androidx.compose.material3:material3:$des.material3_version"
    testImplementation "junit:junit:$des.junit_version"
    androidTestImplementation "androidx.test.ext:junit:$des.ext_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$des.espresso_version"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$des.compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$des.compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$des.compose_version"
}